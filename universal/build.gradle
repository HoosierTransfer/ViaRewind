plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "io.papermc.hangar-publish-plugin" version "0.1.2"
    id "com.modrinth.minotaur" version "2.+"
    id "java-library"
    id "maven-publish"
}

dependencies {
    api project(":viarewind-common")
    api project(":viarewind-bukkit")
    api project(":viarewind-fabric")
    api project(":viarewind-velocity")
}

java {
    withSourcesJar()
    withJavadocJar()
}

shadowJar {
    manifest {
        attributes["paperweight-mappings-namespace"] = "mojang"
    }
    archiveClassifier.set("")
    archiveBaseName.set("ViaRewind-" + project.maven_version)
    configurations {
        api
    }
}

publishing {
    repositories {
        maven {
            name = "Via"
            url = "https://repo.viaversion.com/"

            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            artifactId = project.maven_name
            groupId = project.maven_group
            version = project.maven_version

            from project.shadow.component(publication)
        }
    }
}

build.dependsOn shadowJar

// -----------------------------------------------------
// Publishing

def latestCommitHash() {
    def byteOut = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = byteOut
    }
    return byteOut.toString('UTF-8').trim()
}

def latestCommitMessage() {
    def byteOut = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-1', '--pretty=%B'
        standardOutput = byteOut
    }
    return byteOut.toString('UTF-8').trim()
}

def branchName() {
    def byteOut = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = byteOut
    }
    return byteOut.toString('UTF-8').trim()
}

def branch = branchName()
def baseVersion = project.maven_version
def isRelease = !baseVersion.contains('-')
def isMainBranch = branch == "master"
if (!isRelease || isMainBranch) { // Only publish releases from the main branch
    def suffixedVersion = isRelease ? baseVersion : baseVersion + "+" + System.getenv("GITHUB_RUN_NUMBER")
    def commitHash = latestCommitHash()
    def changelogContent = "[${commitHash}](https://github.com/ViaVersion/ViaRewind/commit/${commitHash}) ${latestCommitMessage()}"
    modrinth {
        def mcVersions = project.mcVersions
                .split(',')
                .collect { it.trim() }

        token.set(System.getenv("MODRINTH_TOKEN"))
        projectId.set("viarewind")
        versionType.set(isRelease ? "release" : isMainBranch ? "beta" : "alpha")
        versionNumber.set(suffixedVersion)
        versionName.set(suffixedVersion)
        changelog.set(changelogContent)
        uploadFile.set(shadowJar.archiveFile)
        gameVersions.set(mcVersions)
        loaders.add("fabric")
        loaders.add("paper")
        loaders.add("folia")
        loaders.add("velocity")
        autoAddDependsOn.set(false)
        detectLoaders.set(false)
        dependencies {
            required.project("viaversion")
            required.project("viabackwards")
            optional.project("viafabric")
        }
    }

    hangarPublish {
        publications.register("plugin") {
            version = suffixedVersion
            id = "ViaRewind"
            channel = isRelease ? "Release" : isMainBranch ? "Snapshot" : "Alpha"
            changelog = changelogContent
            apiKey = System.getenv("HANGAR_TOKEN")
            platforms {
                PAPER {
                    jar = shadowJar.archiveFile
                    platformVersions = [property('mcVersionRange') as String]
                    dependencies {
                        hangar("ViaVersion") {
                            required = true
                        }
                        hangar("ViaBackwards") {
                            required = true
                        }
                    }
                }
                VELOCITY {
                    jar = shadowJar.archiveFile
                    platformVersions = [property("velocityVersion") as String]
                    dependencies {
                        hangar("ViaVersion") {
                            required = true
                        }
                        hangar("ViaBackwards") {
                            required = true
                        }
                    }
                }
            }
        }
    }
}
